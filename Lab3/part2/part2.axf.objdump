
E:/Libraries/Documents/School/College/CpEII_Labs/Lab3/part2/part2.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

            .text
            .global _start

_start:
            LDR     R4,=RESULT   // r4 points to result location
   0:	e59f406c 	ldr	r4, [pc, #108]	; 74 <NUMBERS+0x28>
            LDR     R2, [R4, #4] // r2 holds number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
            ADD     R3, R4, #8   // r3 holds the address of the first number
   8:	e2843008 	add	r3, r4, #8
            
            PUSH    {r4, lr}     // Push LR and r4 to stack as setup
   c:	e92d4010 	push	{r4, lr}
            BL SUB1
  10:	eb000001 	bl	1c <SUB1>

00000014 <DONE>:

DONE:       STR     R0, [R4]     // store value in r0 (largest number) to r4 address
  14:	e5840000 	str	r0, [r4]

00000018 <END>:
END:        B       END
  18:	eafffffe 	b	18 <END>

0000001c <SUB1>:

SUB1:  
            LDR     R0, [R3]     // r0 holds the first number
  1c:	e5930000 	ldr	r0, [r3]

00000020 <LOOP>:
LOOP:       SUBS    R2, R2, #1   // decrement loop counter
  20:	e2522001 	subs	r2, r2, #1
            BEQ     SUB1_END     // if Z==1, aka N=0 branch to label DONE
  24:	0a000005 	beq	40 <SUB1_END>
            ADD     R3, R3, #4   // r3 now holds the next number address
  28:	e2833004 	add	r3, r3, #4
            LDR     R1, [R3]     // load the new number into r1
  2c:	e5931000 	ldr	r1, [r3]
            CMP     R0, R1       // compare r0 and r1 (previous and new numbers)
  30:	e1500001 	cmp	r0, r1
            BGE     LOOP         // if r0 >= r1, branch to label LOOP
  34:	aafffff9 	bge	20 <LOOP>
            MOV     R0, R1       // set the value of r0 to the value of r1
  38:	e1a00001 	mov	r0, r1
                                 // if r0 < r1
            B       LOOP         // branch to the label LOOP
  3c:	eafffff7 	b	20 <LOOP>

00000040 <SUB1_END>:
SUB1_END:   MOV     PC, LR       // return to program
  40:	e1a0f00e 	mov	pc, lr

00000044 <RESULT>:
  44:	00000000 	.word	0x00000000

00000048 <N>:
  48:	0000000a 	.word	0x0000000a

0000004c <NUMBERS>:
  4c:	fffffff7 	.word	0xfffffff7
  50:	00000001 	.word	0x00000001
  54:	0000000a 	.word	0x0000000a
  58:	fffffffb 	.word	0xfffffffb
  5c:	00000004 	.word	0x00000004
  60:	0000000c 	.word	0x0000000c
  64:	fffffffc 	.word	0xfffffffc
  68:	00000008 	.word	0x00000008
  6c:	00000020 	.word	0x00000020
  70:	00000005 	.word	0x00000005
  74:	00000044 	.word	0x00000044
