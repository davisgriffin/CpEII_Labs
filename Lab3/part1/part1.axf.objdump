
E:/Libraries/Documents/School/College/CpEII_Labs/Lab3/part1/part1.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
 */

.text
.global _start
_start:
            LDR     R4,=RESULT   // r4 points to result location
   0:	e59f4060 	ldr	r4, [pc, #96]	; 68 <NUMBERS+0x28>
            LDR     R2, [R4, #4] // r2 holds number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
            ADD     R3, R4, #8   // r3 holds the address of the first number
   8:	e2843008 	add	r3, r4, #8
            LDR     R0, [R3]     // r0 holds the first number
   c:	e5930000 	ldr	r0, [r3]

00000010 <LOOP>:

LOOP:       SUBS    R2, R2, #1   // decrement loop counter
  10:	e2522001 	subs	r2, r2, #1
            BEQ     DONE         // if Z==1, aka N=0 branch to label DONE
  14:	0a000005 	beq	30 <DONE>
            ADD     R3, R3, #4   // r3 now holds the next number address
  18:	e2833004 	add	r3, r3, #4
            LDR     R1, [R3]     // load the new number into r1
  1c:	e5931000 	ldr	r1, [r3]
            CMP     R0, R1       // compare r0 and r1 (previous and new numbers)
  20:	e1500001 	cmp	r0, r1
            BGE     LOOP         // if r0 >= r1, branch to label LOOP
  24:	aafffff9 	bge	10 <LOOP>
            MOV     R0, R1       // set the value of r0 to the value of r1
  28:	e1a00001 	mov	r0, r1
                                 // if r0 < r1
            B       LOOP         // branch to the label LOOP
  2c:	eafffff7 	b	10 <LOOP>

00000030 <DONE>:

DONE:       STR     R0, [R4]     // store value in r0 (largest number) to r4 address
  30:	e5840000 	str	r0, [r4]

00000034 <END>:
END:        B       END
  34:	eafffffe 	b	34 <END>

00000038 <RESULT>:
  38:	00000000 	.word	0x00000000

0000003c <N>:
  3c:	0000000a 	.word	0x0000000a

00000040 <NUMBERS>:
  40:	fffffff7 	.word	0xfffffff7
  44:	00000001 	.word	0x00000001
  48:	0000000a 	.word	0x0000000a
  4c:	fffffffb 	.word	0xfffffffb
  50:	00000004 	.word	0x00000004
  54:	0000000c 	.word	0x0000000c
  58:	fffffffc 	.word	0xfffffffc
  5c:	00000008 	.word	0x00000008
  60:	00000020 	.word	0x00000020
  64:	00000005 	.word	0x00000005
  68:	00000038 	.word	0x00000038
